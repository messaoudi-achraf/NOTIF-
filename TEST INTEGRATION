# ===================================================
# TESTS D'INT√âGRATION NOTIFICATION SERVICE
# ===================================================

# 1. HEALTH CHECK NOTIFICATION SERVICE
echo "üîç Test 1: Health Check Notification Service"
curl http://localhost:8087/api/notifications/health
# Attendu: "‚úÖ Notification Service is operational on port 8087"

# 2. EUREKA REGISTRATION CHECK
echo "üîç Test 2: V√©rification Eureka Registration"
curl http://localhost:8761/eureka/apps/NOTIFICATION-SERVICE
# Attendu: Service visible dans Eureka

# 3. GATEWAY ROUTING CHECK
echo "üîç Test 3: Test Gateway Routing"
curl http://localhost:8080/api/notifications/health
# Attendu: M√™me r√©ponse via Gateway

# 4. TEST WEBSOCKET BASIC
echo "üîç Test 4: Test WebSocket Basic"
curl -X POST http://localhost:8087/api/notifications/test-websocket \
  -H "Content-Type: application/json" \
  -d '{"message": "Test WebSocket depuis curl"}'

# 5. TEST CR√âATION NOTIFICATION G√âN√âRIQUE
echo "üîç Test 5: Cr√©ation Notification G√©n√©rique"
curl -X POST http://localhost:8087/api/notifications \
  -H "Content-Type: application/json" \
  -d '{
    "type": "INFO",
    "priority": "LOW", 
    "title": "Test Notification",
    "message": "Message de test depuis curl",
    "sourceService": "test-service"
  }'

# 6. TEST COMMUNICATION BLOTTER ‚Üí NOTIFICATION
echo "üîç Test 6: Simulation Trade Notification depuis Blotter"
curl -X POST http://localhost:8087/api/notifications/trade/broadcast \
  -H "Content-Type: application/json" \
  -d '{
    "tradeId": "TEST-001",
    "assetClass": "CLN",
    "businessProduct": "Credit Linked Note",
    "direction": "BUY",
    "nominal": 1000000,
    "counterparty": "TEST-BANK",
    "bond": "CLN-TEST-001",
    "sourceService": "blotter-service"
  }'

# 7. TEST LIMIT ALERT (pour services business)
echo "üîç Test 7: Test Limit Alert"
curl -X POST http://localhost:8087/api/notifications/trade/limit-alert \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "trader-001",
    "instrumentType": "EGP",
    "positionId": "EGP-001",
    "priority": "HIGH",
    "message": "Position EGP proche de la limite",
    "sourceService": "egp-service"
  }'

# 8. TEST R√âCUP√âRATION NOTIFICATIONS R√âCENTES
echo "üîç Test 8: Notifications R√©centes"
curl http://localhost:8087/api/notifications/recent?limit=10

# 9. TEST ALERTES CRITIQUES
echo "üîç Test 9: Alertes Critiques"
curl http://localhost:8087/api/notifications/critical

# 10. TEST COMMUNICATION INTER-SERVICES (si Blotter est d√©marr√©)
echo "üîç Test 10: Test depuis Blotter Service"
curl -X POST http://localhost:8085/api/blotter/trades \
  -H "Content-Type: application/json" \
  -d '{
    "assetClass": "RATES",
    "way": "BUY",
    "nominal": 1000000,
    "counterparty": "TEST-BANK",
    "bond": "CLN-TEST-INTEGRATION"
  }'
# Ce test v√©rifie si Blotter notifie automatiquement le Notification Service

# ===================================================
# VALIDATION ATTENDUE
# ===================================================

echo "‚úÖ Si tous les tests retournent des r√©ponses 200/201 avec donn√©es JSON:"
echo "   ‚Üí Notification Service est COMPATIBLE et OP√âRATIONNEL"
echo "   ‚Üí Communication inter-services FONCTIONNELLE" 
echo "   ‚Üí WebSocket configur√© CORRECTEMENT"
echo "   ‚Üí Pr√™t pour int√©gration Frontend React"

echo "üéØ PROCHAINES √âTAPES:"
echo "   1. Tester WebSocket avec Frontend React"
echo "   2. Valider les alertes en temps r√©el"
echo "   3. Configurer les rapports programm√©s"
echo "   4. Activer les notifications email (optionnel)"
