// ===================================================
// FIX WebConfig.java - CORRIGER LES ERREURS
// ===================================================

// src/main/java/com/trading/platform/notification/config/WebConfig.java
package com.trading.platform.notification.config;

import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

/**
 * Configuration Web et WebSocket - Version corrigée
 */
@Configuration
@EnableWebSocketMessageBroker
public class WebConfig implements WebSocketMessageBrokerConfigurer, WebMvcConfigurer {

    /**
     * Configuration WebSocket - Simplifié
     */
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        // Enable simple broker pour destinations
        config.enableSimpleBroker("/topic", "/queue");
        
        // Préfixe pour messages de l'application
        config.setApplicationDestinationPrefixes("/app");
        
        // Préfixe pour messages utilisateur spécifiques
        config.setUserDestinationPrefixes("/user");
    }

    /**
     * Configuration endpoints WebSocket
     */
    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        // Endpoint WebSocket principal
        registry.addEndpoint("/ws-notifications")
                .setAllowedOriginPatterns("*")
                .withSockJS();
    }

    /**
     * Configuration CORS
     */
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOriginPatterns("*")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
        
        registry.addMapping("/ws-notifications/**")
                .allowedOriginPatterns("*")
                .allowCredentials(true);
    }

    /**
     * RestTemplate pour communication inter-services
     */
    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    /**
     * SimpMessagingTemplate pour WebSocket
     */
    @Bean
    public SimpMessagingTemplate messagingTemplate() {
        return new SimpMessagingTemplate(brokerChannel());
    }
    
    /**
     * Broker channel - requis pour SimpMessagingTemplate
     */
    @Bean
    public org.springframework.messaging.MessageChannel brokerChannel() {
        return new org.springframework.messaging.support.ExecutorSubscribableChannel();
    }
}

// ===================================================
// ALTERNATIVE: WebConfig SIMPLIFIÉ (SI PROBLÈMES PERSISTENT)
// ===================================================

/*
// VERSION ALTERNATIVE ULTRA-SIMPLE
@Configuration
public class SimpleWebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOriginPatterns("*")
                .allowedMethods("*")
                .allowedHeaders("*")
                .allowCredentials(true);
    }

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
*/

// ===================================================
// WEBSOCKET CONFIG SÉPARÉ (OPTION ALTERNATIVE)
// ===================================================

/*
// Si vous préférez séparer la config WebSocket

// src/main/java/com/trading/platform/notification/config/WebSocketConfig.java
@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic", "/queue");
        config.setApplicationDestinationPrefixes("/app");
        config.setUserDestinationPrefixes("/user");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws-notifications")
                .setAllowedOriginPatterns("*")
                .withSockJS();
    }

    @Bean
    public SimpMessagingTemplate messagingTemplate() {
        return new SimpMessagingTemplate(brokerChannel());
    }
    
    @Bean
    public MessageChannel brokerChannel() {
        return new ExecutorSubscribableChannel();
    }
}

// Et dans WebConfig.java, gardez seulement:
@Configuration
public class WebConfig implements WebMvcConfigurer {
    
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOriginPatterns("*")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
*/
